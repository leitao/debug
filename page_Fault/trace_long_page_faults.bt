#!/usr/bin/env bpftrace

/* Print information about long page faults
 * Usage: trace_long_page_faults.bt <limit (in ns)>
 *
 * It will print information about page faults that took longer tham `limit`
 */
kfunc:handle_mm_fault
{
	@pagefault_start[tid] = nsecs;
	@pagefault_flags[tid] = args->flags;
	@pagefault_vma_flags[tid] = args->vma->vm_flags;
}


kretfunc:handle_mm_fault /@pagefault_flags[tid]/
{
    $duration = nsecs - @pagefault_start[tid];
    $flags = @pagefault_flags[tid];
    $duration = $duration/1000000;

    if ($duration > $2) {
	printf("%s : %s (%d) : (duration: %d ns)\n", strftime("%H:%M:%S:%f", nsecs),  comm, curtask->prio, $duration);

	$flags = @pagefault_vma_flags[tid];
	if ($flags & 0x00000001) { printf("  VM_READ\n"); }
	if ($flags & 0x00000002) { printf("  VM_WRITE\n"); }
	if ($flags & 0x00000004) { printf("  VM_EXEC\n"); }
	if ($flags & 0x00000008) { printf("  VM_SHARED\n"); }

	// Protection limits for mprotect()
	if ($flags & 0x00000010) { printf("  VM_MAYREAD\n"); }
	if ($flags & 0x00000020) { printf("  VM_MAYWRITE\n"); }
	if ($flags & 0x00000040) { printf("  VM_MAYEXEC\n"); }
	if ($flags & 0x00000080) { printf("  VM_MAYSHARE\n"); }
	if ($flags & 0x00100000) { printf("  VM_ACCOUNT\n"); }
	if ($flags & 0x00200000) { printf("  VM_NORESERVE\n"); }
	if ($flags & 0x00400000) { printf("  VM_HUGETLB\n"); }
    }

    if (@pagefault_start[tid]) {
	delete(@pagefault_start[tid]);
    }
    if (@pagefault_vma_flags[tid]) {
	delete(@pagefault_vma_flags[tid]);
    }
    if (@pagefault_flags[tid]) {
	delete(@pagefault_flags[tid]);
    }
}

